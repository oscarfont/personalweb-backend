diff --git a/node_modules/wysiwyg-editor-node-sdk/lib/utils/disk.management.js b/node_modules/wysiwyg-editor-node-sdk/lib/utils/disk.management.js
index bb977a3..11fa9c2 100644
--- a/node_modules/wysiwyg-editor-node-sdk/lib/utils/disk.management.js
+++ b/node_modules/wysiwyg-editor-node-sdk/lib/utils/disk.management.js
@@ -1,10 +1,10 @@
 var utils = require('./utils.js');
 var Busboy = require('busboy');
 var merge = require('merge');
-var path = require('path');
+var path = require('path')
 var fs = require('fs');
 var sha1 = require('sha1');
-var gm = require('gm').subClass({imageMagick: true});
+var gm = require('gm').subClass({ imageMagick: true });
 
 /**
 * Upload a file to the specified location.
@@ -21,103 +21,106 @@ var gm = require('gm').subClass({imageMagick: true});
 */
 function upload(req, fileRoute, options, callback) {
 
-  var saveToPath = null;
-  var errorMessage = null;
+    var saveToPath = null;
+    var errorMessage = null;
 
-  // Used for sending response.
-  var link = null;
+    // Used for sending response.
+    var link = null;
 
-  function handleStreamError(error) {
+    function handleStreamError(error) {
 
-    // Do not enter twice in here.
-    if (errorMessage) {
-      return;
-    }
-    errorMessage = error;
+        // Do not enter twice in here.
+        if (errorMessage) {
+            return;
+        }
+        errorMessage = error;
+
+        // Cleanup.
+        if (saveToPath) {
+            return fs.unlink(saveToPath, function (err) {
+                return callback(errorMessage);
+            });
+        }
 
-    // Cleanup.
-    if (saveToPath) {
-      return fs.unlink(saveToPath, function (err) {
         return callback(errorMessage);
-      });
     }
 
-    return callback(errorMessage);
-  }
+    try {
+        var busboy = new Busboy({ headers: req.headers });
+    } catch (e) {
+        return callback(e);
+    }
 
-  try {
-    var busboy = new Busboy({ headers: req.headers });
-  } catch(e) {
-    return callback(e);
-  }
+    function sendResponse() {
+        callback(null, { link: link });
+    }
 
-  function sendResponse() {
-    callback(null, {link: link});
-  }
+    // Handle file arrival.
+    busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {
 
-  // Handle file arrival.
-  busboy.on('file', function(fieldname, file, filename, encoding, mimetype) {
+        // Check fieldname:
+        if (fieldname != options.fieldname) {
 
-    // Check fieldname:
-    if (fieldname != options.fieldname) {
+            // Stop receiving from this stream.
+            file.resume();
+            return callback('Fieldname is not correct. It must be: ' + options.fieldname);
+        }
 
-      // Stop receiving from this stream.
-      file.resume();
-      return callback('Fieldname is not correct. It must be: ' + options.fieldname);
-    }
+        // Generate link.
+        var randomName = sha1(new Date().getTime()) + '.' + utils.getExtension(filename);
+        link = fileRoute + randomName;
 
-    // Generate link.
-    var randomName = sha1(new Date().getTime()) + '.' + utils.getExtension(filename);
-    link = fileRoute + randomName;
+        //var appDir = path.dirname(require.main.filename);
+        const appDir = process.cwd();
+        // Generate path where the file will be saved.
+        saveToPath = path.join(appDir, link);
 
-    var appDir = path.dirname(require.main.filename);
-    // Generate path where the file will be saved.
-    saveToPath = path.join(appDir, link);
+        console.log(saveToPath)
 
-    // Pipe reader stream (file from client) into writer stream (file from disk).
-    file.on('error', handleStreamError);
+        // Pipe reader stream (file from client) into writer stream (file from disk).
+        file.on('error', handleStreamError);
 
-    var diskWriterStream = fs.createWriteStream(saveToPath);
-    diskWriterStream.on('error', handleStreamError);
-    diskWriterStream.on('finish', function() {
+        var diskWriterStream = fs.createWriteStream(saveToPath);
+        diskWriterStream.on('error', handleStreamError);
+        diskWriterStream.on('finish', function () {
 
-      // Validate uploaded file.
-      if (options.validation) {
+            // Validate uploaded file.
+            if (options.validation) {
 
-        return utils.isValid(options.validation, saveToPath, mimetype, function(err, status) {
+                return utils.isValid(options.validation, saveToPath, mimetype, function (err, status) {
 
-          if (err) {
-            return handleStreamError(err);
-          }
+                    if (err) {
+                        return handleStreamError(err);
+                    }
 
-          if (!status) {
-            return handleStreamError('File does not meet the validation.');
-          }
+                    if (!status) {
+                        return handleStreamError('File does not meet the validation.');
+                    }
 
-          return sendResponse();
-        });
-      }
-      return sendResponse();
-    })
+                    return sendResponse();
+                });
+            }
+            return sendResponse();
+        })
 
-    if (options.resize && mimetype != 'image/svg+xml') {
+        if (options.resize && mimetype != 'image/svg+xml') {
 
-      var gmFile = gm(file);
-      var imageResizeStream = gmFile.resize.apply(gmFile, options.resize).stream();
-      imageResizeStream.on('error', handleStreamError);
+            var gmFile = gm(file);
+            var imageResizeStream = gmFile.resize.apply(gmFile, options.resize).stream();
+            imageResizeStream.on('error', handleStreamError);
 
-      imageResizeStream.pipe(diskWriterStream);
-    } else {
-      file.pipe(diskWriterStream);
-    }
-  });
+            imageResizeStream.pipe(diskWriterStream);
+        } else {
+            file.pipe(diskWriterStream);
+        }
+    });
 
-  // Handle file upload termination.
-  busboy.on('error', handleStreamError);
-  req.on('error', handleStreamError);
+    // Handle file upload termination.
+    busboy.on('error', handleStreamError);
+    req.on('error', handleStreamError);
 
-  // Pipe reader stream into writer stream.
-  return req.pipe(busboy);
+    // Pipe reader stream into writer stream.
+    return req.pipe(busboy);
 }
 
 /**
@@ -126,14 +129,17 @@ function upload(req, fileRoute, options, callback) {
 * @param src string path to file
 * @param callback returns null/undefined or error string
 */
-var _delete = function(src, callback) {
+var _delete = function (src, callback) {
 
-  fs.unlink(path.join(path.dirname(require.main.filename), src), function (err) {
-    if (err) {
-      return callback(err);
-    }
-    return callback();
-  });
+    const appDir = process.cwd();
+    console.log(appDir)
+
+    fs.unlink(path.join(path.dirname(appDir), src), function (err) {
+        if (err) {
+            return callback(err);
+        }
+        return callback();
+    });
 }
 
 
